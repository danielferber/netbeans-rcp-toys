/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.usefultoys.rcp.security.ui;

import org.usefultoys.rcp.platform.dialog.api.DialogConvention;
import java.awt.Component;
import java.util.Arrays;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;
import org.usefultoys.rcp.platform.dialog.core.DialogConventionDefault;

/**
 *
 * @author Daniel Felix Ferber
 */
@NbBundle.Messages({
    "UserPasswordPanel_Message_NewPasswordMismatch=New password is different.",
    "UserPasswordPanel_Message_Default=Provide current and new password."
})
public class UserPasswordPanel extends javax.swing.JPanel implements DialogConvention.Support<UserPasswordPanel.Inbound, UserPasswordPanel.Outbound> {

    private final Validation validation;
    private final Descriptor descriptor;
    private final DialogConventionImpl dialogConvention;

    /**
     * Describes how to build the panel.
     */
    public static class Descriptor {

        public String defaultMessage = Bundle.UserPasswordPanel_Message_Default();
    }

    public interface Validation {

        String posValidation(Outbound outbound) throws IllegalStateException;
    }

    /**
     * Contains values to populate fields shown on the panel.
     */
    public static class Inbound {
        // not used yet
    }

    /**
     * Contains values from fields shown on the panel.
     */
    public static class Outbound {

        public char[] newPassword;
        public char[] oldPassword;
    }

    /**
     * Creates new form UserPasswordPanel
     */
    public UserPasswordPanel(Descriptor descriptor, Validation validation) {
        this.descriptor = descriptor;
        final FieldDocumentListener fieldDocumentListener = new FieldDocumentListener();
        initComponents();
        this.currentPasswordField.getDocument().addDocumentListener(fieldDocumentListener);
        this.newPasswordField.getDocument().addDocumentListener(fieldDocumentListener);
        this.repeatPasswordField.getDocument().addDocumentListener(fieldDocumentListener);
        this.validation = validation;
        this.dialogConvention = new DialogConventionImpl(this, descriptor.defaultMessage);
    }

    private class FieldDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            dialogConvention.scheduleUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            dialogConvention.scheduleUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            dialogConvention.scheduleUpdate();
        }
    }

    @Override
    public DialogConvention getDialogConvention() {
        return dialogConvention;
    }

    private class DialogConventionImpl extends DialogConventionDefault<Inbound, Outbound> {

        public DialogConventionImpl(Component source, String defaultMessage) {
            super(source, defaultMessage);
        }

        @Override
        public Inbound createInbound() {
            return new Inbound();
        }

        @Override
        public Outbound createOutbound() {
            return new Outbound();
        }

        @Override
        protected void convertInboundToFields(Inbound inbound) {
            currentPasswordField.setText("");
            newPasswordField.setText("");
            repeatPasswordField.setText("");
        }

        @Override
        protected String convertFieldToOutbound(Outbound outbound) throws IllegalStateException {
            outbound.newPassword = newPasswordField.getPassword();
            outbound.oldPassword = currentPasswordField.getPassword();
            return null;
        }

        @Override
        protected String executePreValidation() throws IllegalStateException {
            if (!Arrays.equals(newPasswordField.getPassword(), repeatPasswordField.getPassword())) {
                throw new IllegalStateException(Bundle.UserPasswordPanel_Message_NewPasswordMismatch());
            }
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentPasswordLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        repeatPasswordLabel = new javax.swing.JLabel();
        currentPasswordField = new javax.swing.JPasswordField();
        newPasswordField = new javax.swing.JPasswordField();
        repeatPasswordField = new javax.swing.JPasswordField();

        org.openide.awt.Mnemonics.setLocalizedText(currentPasswordLabel, org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.currentPasswordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(newPasswordLabel, org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.newPasswordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(repeatPasswordLabel, org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.repeatPasswordLabel.text")); // NOI18N

        currentPasswordField.setText(org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.currentPasswordField.text")); // NOI18N
        currentPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        currentPasswordField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fieldPropertyChange(evt);
            }
        });

        newPasswordField.setText(org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.newPasswordField.text")); // NOI18N
        newPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        newPasswordField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fieldPropertyChange(evt);
            }
        });

        repeatPasswordField.setText(org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.repeatPasswordField.text")); // NOI18N
        repeatPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        repeatPasswordField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fieldPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(currentPasswordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newPasswordLabel)
                            .addComponent(repeatPasswordLabel))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(repeatPasswordField)
                            .addComponent(newPasswordField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentPasswordLabel)
                    .addComponent(currentPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPasswordLabel)
                    .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatPasswordLabel)
                    .addComponent(repeatPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void fieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fieldPropertyChange
    }//GEN-LAST:event_fieldPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField currentPasswordField;
    private javax.swing.JLabel currentPasswordLabel;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField repeatPasswordField;
    private javax.swing.JLabel repeatPasswordLabel;
    // End of variables declaration//GEN-END:variables
}
