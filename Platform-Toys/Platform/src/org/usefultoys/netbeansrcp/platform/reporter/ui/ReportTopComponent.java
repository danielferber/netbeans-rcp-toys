/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.usefultoys.netbeansrcp.platform.reporter.ui;

import java.util.ArrayList;
import java.util.List;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.usefultoys.netbeansrcp.platform.reporter.Report;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.usefultoys.netbeansrcp.platform.reporter.ui//Report//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = ReportTopComponent.TOP_COMPONENT_PREFERRED_ID,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = ReportTopComponent.TOP_COMPONENT_ACTION_ID)
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ReportAction",
        preferredID = "ReportTopComponent"
)
@Messages({
    "CTL_ReportAction=Report",
    "CTL_ReportTopComponent=Report Window",
    "HINT_ReportTopComponent=This is a Report window"
})
public final class ReportTopComponent extends TopComponent {

    public static final String TOP_COMPONENT_ACTION_ID = "org.usefultoys.netbeansrcp.platform.reporter.ui.ReportTopComponent";
    public static final String TOP_COMPONENT_PREFERRED_ID = "ReportTopComponent";

    private final ReportTreeTableModel model;

    public ReportTopComponent() {
        initComponents();
        setName(Bundle.CTL_ReportTopComponent());
        setToolTipText(Bundle.HINT_ReportTopComponent());

        model = new ReportTreeTableModel();
        TreeTableCellRenderer renderer = new TreeTableCellRenderer(table, model);
        table.setModel(new TreeTableModelAdapter(model, renderer));
        TreeTableSelectionModel selectionModel = new TreeTableSelectionModel();
        renderer.setSelectionModel(selectionModel); //For the tree
        table.setSelectionModel(selectionModel.getListSelectionModel()); //For the table
        table.setDefaultRenderer(TreeTableModel.class, renderer);
        table.setDefaultEditor(TreeTableModel.class, new TreeTableControlColumnCellEditor(renderer, table));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    void start(Report report) {
        model.adicionarOuAtualizar(report);
    }

    void progress(Report report) {
        model.adicionarOuAtualizar(report);
    }

    void ok(Report report) {
        model.adicionarOuAtualizar(report);
    }

    void reject(Report report) {
        model.adicionarOuAtualizar(report);
    }

    void fail(Report report) {
        model.adicionarOuAtualizar(report);
    }
}
