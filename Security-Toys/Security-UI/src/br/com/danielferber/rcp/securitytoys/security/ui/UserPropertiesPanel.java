/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.danielferber.rcp.securitytoys.security.ui;

import br.com.danielferber.rcp.securitytoys.security.api.AuthenticatedUser;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotificationLineSupport;
import org.openide.util.NbBundle;

/**
 *
 * @author Daniel Felix Ferber
 */
@NbBundle.Messages({
    "UserPropertiesPanel_ChangeUserPasswordDialogTitle=Change user password",
    "UserPropertiesPanel_DefaultMessage=User information"
})
public class UserPropertiesPanel extends javax.swing.JPanel {

    /**
     * Describes how to build the panel.
     */
    public static class Descriptor {

        boolean editableProperties;
        public boolean editableLogin;
        public boolean editableName;
        public boolean editablePassword;
        public String defaultMessage = Bundle.UserPropertiesPanel_DefaultMessage();
    }

    public interface Validation {

        String validateLoginCandidate(String candidate) throws IllegalStateException;
    }

    public static class Inbound {

        public String login;
        public String name;

        public Inbound() {
            super();
        }

        public Inbound(AuthenticatedUser authenticatedUser) {
            if (authenticatedUser == null) {
                throw new IllegalArgumentException("authenticatedUser == null");
            }
            login = authenticatedUser.getLogin();
            name = authenticatedUser.getName();
        }
    }

    public static class Outbound {

        public String login;
        public String name;
        public char[] newPassword;
        public char[] oldPassword;
    }

    private final Descriptor descriptor;
    private final Validation validation;
    private NotificationLineSupport notificationLine;
    private UserPasswordPanel.Outbound passwordOutbound = null;

    /**
     * Creates new form UserPropertiesPanel
     */
    public UserPropertiesPanel(Descriptor descriptor, Validation validation) {
        initComponents();
        this.descriptor = descriptor;
        this.validation = validation;
        updateFieldEditable();
    }

    public void toField(Inbound inbound) {
        loginField.setText(inbound.login);
        nameField.setText(inbound.name);
        executeValidation();
        updateFieldEditable();
    }

    private void updateFieldEditable() {
        boolean enabled = super.isEnabled();
        this.passwordButton.setEnabled(descriptor.editablePassword && enabled);
        this.loginField.setEditable(descriptor.editableProperties && descriptor.editableLogin && enabled);
        this.nameField.setEditable(descriptor.editableProperties && descriptor.editableName && enabled);
    }

    public void fromField(Outbound outbound) throws IllegalStateException {
        executeValidationImpl();
        outbound.name = nameField.getText();
        outbound.login = loginField.getText();
        if (passwordOutbound != null) {
            outbound.newPassword = passwordOutbound.newPassword;
            outbound.oldPassword = passwordOutbound.oldPassword;
        } else {
            outbound.newPassword = null;
            outbound.oldPassword = null;
        }
    }

    private String executeValidationImpl() throws IllegalStateException {
        String message = null;
        if (validation != null) {
            message = validation.validateLoginCandidate(loginField.getText());
        }
        return message;
    }

    public void executeValidation() {
        try {
            String message = executeValidationImpl();
            if (message != null) {
                this.notificationLine.setWarningMessage(message);
            } else {
                this.notificationLine.setInformationMessage(descriptor.defaultMessage);
            }
        } catch (IllegalStateException e) {
            if (this.notificationLine != null) {
                this.notificationLine.setErrorMessage(e.getMessage());
            }
        }
    }

    private void runChangePasswordImpl() {
        UserPasswordAction.runAction(this);
    }

    public void setNotificationLine(NotificationLineSupport notificationLine) {
        this.notificationLine = notificationLine;
        this.notificationLine.setInformationMessage(descriptor.defaultMessage);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        loginField = new javax.swing.JTextField();
        passwordButton = new javax.swing.JToggleButton();
        nameField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(loginLabel, org.openide.util.NbBundle.getMessage(UserPropertiesPanel.class, "UserPropertiesPanel.loginLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(UserPropertiesPanel.class, "UserPropertiesPanel.nameLabel.text")); // NOI18N

        loginField.setText(org.openide.util.NbBundle.getMessage(UserPropertiesPanel.class, "UserPropertiesPanel.loginField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(passwordButton, org.openide.util.NbBundle.getMessage(UserPropertiesPanel.class, "UserPropertiesPanel.passwordButton.text")); // NOI18N
        passwordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordButtonActionPerformed(evt);
            }
        });

        nameField.setText(org.openide.util.NbBundle.getMessage(UserPropertiesPanel.class, "UserPropertiesPanel.nameField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginField, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel)
                    .addComponent(loginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void passwordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordButtonActionPerformed
        runChangePasswordImpl();
    }//GEN-LAST:event_passwordButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField loginField;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JToggleButton passwordButton;
    // End of variables declaration//GEN-END:variables
}
