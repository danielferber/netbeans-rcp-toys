/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.danielferber.rcp.securitytoys.security.ui;

import java.util.Arrays;
import org.openide.NotificationLineSupport;
import org.openide.util.NbBundle;

/**
 *
 * @author Daniel Felix Ferber
 */
@NbBundle.Messages({
    "UserPasswordPanel_Validation_NewPasswordDifferent=New password is different.",
    "UserPasswordPanel_Message_Default=Provide current and new password."
})
public class UserPasswordPanel extends javax.swing.JPanel {

    private final Validation validation;

    /**
     * Describes how to build the panel.
     */
    public static class Descriptor {

        public String defaultMessage = Bundle.UserPasswordPanel_Message_Default();
    }

    public interface Validation {

        String validatePasswordCandidate(char[] candidate) throws IllegalStateException;
    }

    public static class Outbound {

        public char[] newPassword;
        public char[] oldPassword;
    }

    private final Descriptor descriptor;
    private NotificationLineSupport notificationLine;

    /**
     * Creates new form UserPasswordPanel
     */
    public UserPasswordPanel(Descriptor descriptor, Validation validation) {
        this.descriptor = descriptor;
        initComponents();
        this.validation = validation;
    }

    public void setNotificationLine(NotificationLineSupport notificationLine) {
        this.notificationLine = notificationLine;
    }

    public void fromField(Outbound outbound) throws IllegalStateException {
        executeValidationImpl();
        outbound.newPassword = this.newPasswordField.getPassword();
        outbound.oldPassword = this.currentPasswordField.getPassword();
    }

    void toField() {
        this.currentPasswordField.setText("");
        this.newPasswordField.setText("");
        this.repeatPasswordField.setText("");
        executeValidation();
    }

    private String executeValidationImpl() throws IllegalStateException {
        String message = null;
        if (this.validation != null) {
            message = this.validation.validatePasswordCandidate(newPasswordField.getPassword());
        }
        if (!Arrays.equals(this.newPasswordField.getPassword(), this.repeatPasswordField.getPassword())) {
            throw new IllegalStateException(Bundle.UserPasswordPanel_Validation_NewPasswordDifferent());
        }
        return message;
    }

    public void executeValidation() {
        try {
            String message = executeValidationImpl();
            if (message != null) {
                this.notificationLine.setWarningMessage(message);
            } else {
                this.notificationLine.setInformationMessage(descriptor.defaultMessage);
            }
        } catch (IllegalStateException e) {
            if (this.notificationLine != null) {
                this.notificationLine.setErrorMessage(e.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentPasswordLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        repeatPasswordLabel = new javax.swing.JLabel();
        currentPasswordField = new javax.swing.JPasswordField();
        newPasswordField = new javax.swing.JPasswordField();
        repeatPasswordField = new javax.swing.JPasswordField();

        org.openide.awt.Mnemonics.setLocalizedText(currentPasswordLabel, org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.currentPasswordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(newPasswordLabel, org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.newPasswordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(repeatPasswordLabel, org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.repeatPasswordLabel.text")); // NOI18N

        currentPasswordField.setText(org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.currentPasswordField.text")); // NOI18N
        currentPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });
        currentPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        currentPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordFieldKeyTyped(evt);
            }
        });

        newPasswordField.setText(org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.newPasswordField.text")); // NOI18N
        newPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });
        newPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        newPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordFieldKeyTyped(evt);
            }
        });

        repeatPasswordField.setText(org.openide.util.NbBundle.getMessage(UserPasswordPanel.class, "UserPasswordPanel.repeatPasswordField.text")); // NOI18N
        repeatPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });
        repeatPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        repeatPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(currentPasswordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newPasswordLabel)
                            .addComponent(repeatPasswordLabel))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(repeatPasswordField)
                            .addComponent(newPasswordField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentPasswordLabel)
                    .addComponent(currentPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPasswordLabel)
                    .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatPasswordLabel)
                    .addComponent(repeatPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        executeValidation();
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void passwordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusLost
        executeValidation();
    }//GEN-LAST:event_passwordFieldFocusLost

    private void passwordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyTyped
        executeValidation();
    }//GEN-LAST:event_passwordFieldKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField currentPasswordField;
    private javax.swing.JLabel currentPasswordLabel;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField repeatPasswordField;
    private javax.swing.JLabel repeatPasswordLabel;
    // End of variables declaration//GEN-END:variables
}
