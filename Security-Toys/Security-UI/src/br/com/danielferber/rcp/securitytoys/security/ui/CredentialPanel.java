package br.com.danielferber.rcp.securitytoys.security.ui;

import br.com.danielferber.rcp.securitytoys.security.core.AuthenticationProcessServiceDefault;
import org.openide.NotificationLineSupport;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

/**
 *
 * @author X7WS
 */
@NbBundle.Messages({
    "CredentialPanel_Message_Default=Enter login and password.",
    "CredentialPanel_Message_LoginRequired=Login must not be empty.",
    "CredentialPanel_Message_PasswordRequired=Password must not be empty."
})
public class CredentialPanel extends javax.swing.JPanel {

    private final Descriptor descriptor;
    private NotificationLineSupport notificationLine;

    /**
     * Describes how to build the panel.
     */
    public static class Descriptor {

        public String defaultMessage = Bundle.UserPasswordPanel_Message_Default();
        public boolean suggestPrevisouLogin = true;
    }

    public static class Inbound {

        public String login;
    }

    public static class Outbound {

        public String login;
        public char[] password;
    }

    /**
     * Creates new form CredenciaisPanel
     */
    public CredentialPanel(Descriptor descriptor) {
        initComponents();
        this.descriptor = descriptor;
    }

    public void setNotificationLine(NotificationLineSupport notificationLine) {
        this.notificationLine = notificationLine;
    }

    public void fromField(Outbound outbound) throws IllegalStateException {
        executePreValidation();
        fillOutbound(outbound);
        executePosValidation(outbound);
        NbPreferences.forModule(CredentialPanel.class).put("login", outbound.login);
    }

    protected String fillOutbound(Outbound outbound) throws IllegalStateException {
        outbound.login = this.loginField.getText().trim();
        outbound.password = this.passwordField.getPassword();
        return null;
    }

    protected String executePreValidation() throws IllegalStateException {
        return null;
    }

    protected String executePosValidation(Outbound outbound) throws IllegalStateException {
        String message = null;
        if (outbound.login.length() == 0) {
            throw new IllegalStateException();
        }
        if (outbound.password.length == 0) {
            throw new IllegalStateException();
        }
        return message;
    }

    public void toField(Inbound inbound) {
        if (inbound.login == null) {
            final String lastLogin = NbPreferences.forModule(CredentialPanel.class).get("login", "");
            this.loginField.setText(lastLogin);
        } else {
            this.loginField.setText(inbound.login);
        }
        this.passwordField.setText("");
        executeValidation();
    }

    protected void executeValidation() {
        try {
            final Outbound outbound = new Outbound();
            String message1 = executePreValidation();
            String message2 = fillOutbound(outbound);
            String message3 = executePosValidation(outbound);

            if (message1 != null) {
                this.notificationLine.setWarningMessage(message1);
            } else if (message2 != null) {
                this.notificationLine.setWarningMessage(message2);
            } else if (message3 != null) {
                this.notificationLine.setWarningMessage(message3);
            } else {
                this.notificationLine.setInformationMessage(descriptor.defaultMessage);
            }
        } catch (IllegalStateException e) {
            if (this.notificationLine != null) {
                this.notificationLine.setErrorMessage(e.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginLabel = new javax.swing.JLabel();
        loginField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();

        org.openide.awt.Mnemonics.setLocalizedText(loginLabel, org.openide.util.NbBundle.getMessage(CredentialPanel.class, "CredentialPanel.loginLabel.text")); // NOI18N

        loginField.setText(org.openide.util.NbBundle.getMessage(CredentialPanel.class, "CredentialPanel.loginField.text")); // NOI18N
        loginField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                loginFieldPropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, org.openide.util.NbBundle.getMessage(CredentialPanel.class, "CredentialPanel.passwordLabel.text")); // NOI18N

        passwordField.setText(org.openide.util.NbBundle.getMessage(CredentialPanel.class, "CredentialPanel.passwordField.text")); // NOI18N
        passwordField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                passwordFieldPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loginField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel)
                    .addComponent(loginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loginFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_loginFieldPropertyChange
        if ("text".equals(evt.getPropertyName())) {
            executeValidation();
        }
    }//GEN-LAST:event_loginFieldPropertyChange

    private void passwordFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_passwordFieldPropertyChange
        if ("text".equals(evt.getPropertyName())) {
            executeValidation();
        }
    }//GEN-LAST:event_passwordFieldPropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField loginField;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    // End of variables declaration//GEN-END:variables
}
